{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2551,"databundleVersionId":29345,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:45.636692Z","iopub.execute_input":"2025-08-07T19:39:45.637021Z","iopub.status.idle":"2025-08-07T19:39:46.081222Z","shell.execute_reply.started":"2025-08-07T19:39:45.636990Z","shell.execute_reply":"2025-08-07T19:39:46.080117Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Readimg the datasets as CSV files into the dataframes**","metadata":{}},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/input/GiveMeSomeCredit/cs-training.csv')\ntest_df = pd.read_csv('/kaggle/input/GiveMeSomeCredit/cs-test.csv')\nnum_names= train_df.select_dtypes(include=['int64','float64']).columns\ntrain_df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:46.082140Z","iopub.execute_input":"2025-08-07T19:39:46.082520Z","iopub.status.idle":"2025-08-07T19:39:46.420756Z","shell.execute_reply.started":"2025-08-07T19:39:46.082497Z","shell.execute_reply":"2025-08-07T19:39:46.419395Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Visualizing the datasets as histograms to check any SKewness or anomly in the dataset ","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsample_df = train_df.sample(150000, random_state=0)\n\nfor col in num_names:\n    sns.histplot(sample_df[col], kde=True, bins=10)\n    plt.title(col)\n    plt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Generating a full dataset report for furthur analysis of the dataset","metadata":{}},{"cell_type":"code","source":"from ydata_profiling import ProfileReport\nprofile = ProfileReport(train_df)\nprofile.to_notebook_iframe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:46.422537Z","iopub.execute_input":"2025-08-07T19:39:46.422795Z","iopub.status.idle":"2025-08-07T19:39:46.427875Z","shell.execute_reply.started":"2025-08-07T19:39:46.422774Z","shell.execute_reply":"2025-08-07T19:39:46.426731Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We can see that there are many columns having skewness and also many columns that have data majorly lying around 0 so to fix that we will apply log transformation to reduce skewness from the dataset and this also fixes the 0 issue ","metadata":{}},{"cell_type":"code","source":"\ntrain_df['NumberOfTime60-89DaysPastDueNotWorse'] = np.log1p(train_df['NumberOfTime60-89DaysPastDueNotWorse'])\ntrain_df['NumberRealEstateLoansOrLines'] = np.log1p(train_df['NumberRealEstateLoansOrLines'])\ntrain_df['NumberOfTimes90DaysLate']=np.log1p(train_df['NumberOfTimes90DaysLate'])\ntrain_df['NumberOfTime30-59DaysPastDueNotWorse'] =np.log1p(train_df['NumberOfTime30-59DaysPastDueNotWorse'])\ntrain_df['DebtRatio']= np.log1p(train_df['DebtRatio'])\ntrain_df['RevolvingUtilizationOfUnsecuredLines']=np.log1p(train_df['RevolvingUtilizationOfUnsecuredLines'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:46.429644Z","iopub.execute_input":"2025-08-07T19:39:46.429927Z","iopub.status.idle":"2025-08-07T19:39:46.471455Z","shell.execute_reply.started":"2025-08-07T19:39:46.429902Z","shell.execute_reply":"2025-08-07T19:39:46.469292Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ntest_df['NumberOfTime60-89DaysPastDueNotWorse'] = np.log1p(test_df['NumberOfTime60-89DaysPastDueNotWorse'])\ntest_df['NumberRealEstateLoansOrLines'] = np.log1p(test_df['NumberRealEstateLoansOrLines'])\ntest_df['NumberOfTimes90DaysLate']=np.log1p(test_df['NumberOfTimes90DaysLate'])\ntest_df['NumberOfTime30-59DaysPastDueNotWorse'] =np.log1p(test_df['NumberOfTime30-59DaysPastDueNotWorse'])\ntest_df['DebtRatio']= np.log1p(train_df['DebtRatio'])\ntest_df['RevolvingUtilizationOfUnsecuredLines']=np.log1p(test_df['RevolvingUtilizationOfUnsecuredLines'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:46.472843Z","iopub.execute_input":"2025-08-07T19:39:46.473195Z","iopub.status.idle":"2025-08-07T19:39:46.496670Z","shell.execute_reply.started":"2025-08-07T19:39:46.473152Z","shell.execute_reply":"2025-08-07T19:39:46.494495Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from xgboost import XGBClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.compose import ColumnTransformer \nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import make_scorer","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:46.500110Z","iopub.execute_input":"2025-08-07T19:39:46.501515Z","iopub.status.idle":"2025-08-07T19:39:47.297877Z","shell.execute_reply.started":"2025-08-07T19:39:46.501480Z","shell.execute_reply":"2025-08-07T19:39:47.296624Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"dividing dataset into Features and Target variable ","metadata":{}},{"cell_type":"code","source":"dlt_col = ['Unnamed: 0','SeriousDlqin2yrs']\nX = train_df.drop(dlt_col,axis=1)\ny = train_df['SeriousDlqin2yrs']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:47.298701Z","iopub.execute_input":"2025-08-07T19:39:47.299113Z","iopub.status.idle":"2025-08-07T19:39:47.323821Z","shell.execute_reply.started":"2025-08-07T19:39:47.299087Z","shell.execute_reply":"2025-08-07T19:39:47.322722Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Creating Pipeline so that ther is no data leakage and the process is done without any issue or error \n\nAs we only have numerical dataset we dont have to create seperate preprocessings only imputaing for the numerical dataset will be done, we are using xgboost model because it is less sensitive to 0s or sekwed datasets \n","metadata":{}},{"cell_type":"code","source":"num_cols=X.select_dtypes(include=['int64','float64']).columns\ntrain_x, val_x , train_y, val_y =train_test_split(X,y, test_size=0.2, random_state=42)\npipeline = Pipeline([('imputer',SimpleImputer(strategy='median')),\n                     ('model',XGBClassifier(use_label_encoder=False,eval_metric='logloss'))])\nf1 =make_scorer(f1_score)\ncv_score = cross_val_score(pipeline,X,y,cv=6,scoring='f1')\nprint(cv_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:47.325189Z","iopub.execute_input":"2025-08-07T19:39:47.325617Z","iopub.status.idle":"2025-08-07T19:39:53.789901Z","shell.execute_reply.started":"2025-08-07T19:39:47.325581Z","shell.execute_reply":"2025-08-07T19:39:53.787941Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"using cross validation for checking model performance and using F1 score fo model scoring because our dataset is highly imbalanced therefor F1 score is essential here ","metadata":{}},{"cell_type":"code","source":"pipeline.fit(X,y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:53.790827Z","iopub.execute_input":"2025-08-07T19:39:53.791076Z","iopub.status.idle":"2025-08-07T19:39:54.702282Z","shell.execute_reply.started":"2025-08-07T19:39:53.791057Z","shell.execute_reply":"2025-08-07T19:39:54.700976Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_id = test_df['Unnamed: 0']\ntest_df = test_df.drop(dlt_col,axis=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:54.703613Z","iopub.execute_input":"2025-08-07T19:39:54.703868Z","iopub.status.idle":"2025-08-07T19:39:54.713752Z","shell.execute_reply.started":"2025-08-07T19:39:54.703847Z","shell.execute_reply":"2025-08-07T19:39:54.712509Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ny_test_pred = pipeline.predict_proba(test_df)[: , 1]\n\n# Create submission DataFrame\nsubmission = pd.DataFrame({\n    'Id': test_id,\n    'Probability': y_test_pred  # or 'SeriousDlqin2yrs' if that's the required column name\n})\n\n# Save to CSV\nsubmission.to_csv('submission.csv', index=False)\nprint(\"âœ… Submission file saved as 'submission.csv'\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T19:39:54.714956Z","iopub.execute_input":"2025-08-07T19:39:54.715464Z","iopub.status.idle":"2025-08-07T19:39:55.059929Z","shell.execute_reply.started":"2025-08-07T19:39:54.715438Z","shell.execute_reply":"2025-08-07T19:39:55.058574Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}